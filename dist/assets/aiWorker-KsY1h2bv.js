(function(){"use strict";function x(t,e,n,o,s){const c=[],i=o==="w"?"b":"w";for(const[l,a]of s)for(let f=1;f<8;f++){const u=e+l*f,r=n+a*f;if(u<0||u>=8||r<0||r>=8)break;const g=t[u][r];if(g){g.charAt(0)===i&&c.push([u,r]);break}else c.push([u,r])}return c}function O(t,e,n,o){const s=[],c=o==="w"?"b":"w",i=[[-2,-1],[-2,1],[-1,-2],[-1,2],[1,-2],[1,2],[2,-1],[2,1]];for(const[l,a]of i){const f=e+l,u=n+a;if(f>=0&&f<8&&u>=0&&u<8){const r=t[f][u];(!r||r.charAt(0)===c)&&s.push([f,u])}}return s}function L(t,e,n,o,s){const c=[],i=o==="w"?"b":"w",l=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];for(const[r,g]of l){const k=e+r,h=n+g;if(k>=0&&k<8&&h>=0&&h<8){const p=t[k][h];(!p||p.charAt(0)===i)&&c.push([k,h])}}const a=o==="w"?7:0,f=4,u=s||{};return e===a&&n===f&&((o==="w"&&u.wK||o==="b"&&u.bK)&&t[e][f+1]===null&&t[e][f+2]===null&&!A(t,e,f,i,"getKingMoves KS check current")&&!A(t,e,f+1,i,"getKingMoves KS check path1")&&!A(t,e,f+2,i,"getKingMoves KS check path2")&&c.push([e,f+2]),(o==="w"&&u.wQ||o==="b"&&u.bQ)&&t[e][f-1]===null&&t[e][f-2]===null&&t[e][f-3]===null&&!A(t,e,f,i,"getKingMoves QS check current")&&!A(t,e,f-1,i,"getKingMoves QS check path1")&&!A(t,e,f-2,i,"getKingMoves QS check path2")&&c.push([e,f-2])),c}function $(t,e){for(let n=0;n<8;n++)for(let o=0;o<8;o++)if(t[n][o]===e)return{row:n,col:o};return console.error(`[findKingPosition] KING ${e} NOT FOUND!`),null}function B(t,e,n,o,s,c=!1){const i=t[e][n],l=[];if(!i||i.charAt(0)!==o)return l;const a=i.substring(1),f=o==="w"?"b":"w";if(a==="P")o==="w"?(e>0&&!t[e-1][n]&&(l.push([e-1,n]),e===6&&!t[e-2][n]&&l.push([e-2,n])),e>0&&n>0&&t[e-1][n-1]&&t[e-1][n-1].charAt(0)==="b"&&l.push([e-1,n-1]),e>0&&n<7&&t[e-1][n+1]&&t[e-1][n+1].charAt(0)==="b"&&l.push([e-1,n+1])):(e<7&&!t[e+1][n]&&(l.push([e+1,n]),e===1&&!t[e+2][n]&&l.push([e+2,n])),e<7&&n>0&&t[e+1][n-1]&&t[e+1][n-1].charAt(0)==="w"&&l.push([e+1,n-1]),e<7&&n<7&&t[e+1][n+1]&&t[e+1][n+1].charAt(0)==="w"&&l.push([e+1,n+1]));else if(a==="R"){const h=[[0,1],[0,-1],[1,0],[-1,0]];l.push(...x(t,e,n,o,h))}else if(a==="N")l.push(...O(t,e,n,o));else if(a==="B"){const h=[[-1,-1],[-1,1],[1,-1],[1,1]];l.push(...x(t,e,n,o,h))}else if(a==="Q"){const h=[[0,1],[0,-1],[1,0],[-1,0],[-1,-1],[-1,1],[1,-1],[1,1]];l.push(...x(t,e,n,o,h))}else if(a==="K"){let h=s;c&&(h={wK:!1,wQ:!1,bK:!1,bQ:!1}),l.push(...L(t,e,n,o,h))}if(c)return l.filter(p=>p[0]>=0&&p[0]<8&&p[1]>=0&&p[1]<8);const u=[],r=o+"K",g=4;for(const h of l){const[p,K]=h,M=t.map(I=>I.slice());if(a==="K"&&Math.abs(n-K)===2){M[p][K]=M[e][n],M[e][n]=null;const I=K>n?7:0,y=K>n?g+1:g-1;M[e][I]&&(M[e][y]=M[e][I],M[e][I]=null)}else M[p][K]=M[e][n],M[e][n]=null;let S;if(a==="K"?S={row:p,col:K}:S=$(M,r),!S)continue;A(M,S.row,S.col,f,`PM Safety Check for ${i} to [${p},${K}]`)||u.push(h)}return u.filter(h=>h[0]>=0&&h[0]<8&&h[1]>=0&&h[1]<8)}function v(t,e,n){const o=[],s=t.length;if(!t||s===0||t[0].length!==s)return console.error("[allPossibleMoves] Invalid board provided."),o;for(let c=0;c<s;c++)for(let i=0;i<s;i++){const l=t[c][i];if(l&&l.charAt(0)===e){const a=[c,i],f=B(t,c,i,e,n);for(const u of f)o.push([a,u])}}return o}function A(t,e,n,o,s="N/A"){for(let c=0;c<8;c++)for(let i=0;i<8;i++){const l=t[c][i];if(l&&l.charAt(0)===o)if(l.charAt(1)==="P"){if(e===c+(o==="w"?-1:1)&&(n===i-1||n===i+1))return!0}else{const f=B(t,c,i,o,null,!0);if(Array.isArray(f)&&f.some(u=>u[0]===e&&u[1]===n))return!0}}return!1}function Q(t,e){const n=t.map(a=>[...a]),[o,s]=e[0],[c,i]=e[1];let l=n[o][s];if(n[c][i]=l,n[o][s]=null,l&&l.charAt(1)==="P"&&(c===0||c===7)&&(n[c][i]=l.charAt(0)+"Q"),l&&l.charAt(1)==="K"&&Math.abs(s-i)===2){let f,u;i>s?(f=7,u=5):(f=0,u=3),n[o][f]?(n[o][u]=n[o][f],n[o][f]=null):console.error(`[doMove] Castling error: Rook not found at [${o},${f}] for move ${JSON.stringify(e)}`)}return n}function w(t,e){const n={P:1,N:3,B:3,R:5,Q:9,K:100};if(v(t,"w",e).length===0){let s=null;for(let c=0;c<8;c++)for(let i=0;i<8;i++)t[c][i]==="wK"&&(s={r:c,c:i});return s&&A(t,s.r,s.c,"b",e)?-1e4:0}if(v(t,"b",e).length===0){let s=null;for(let c=0;c<8;c++)for(let i=0;i<8;i++)t[c][i]==="bK"&&(s={r:c,c:i});return s&&A(t,s.r,s.c,"w",e)?1e4:0}let o=0;for(let s=0;s<8;s++)for(let c=0;c<8;c++){const i=t[s][c];if(i){const l=i.charAt(0),a=i.charAt(1),f=n[a]||0;l==="w"?o+=f:o-=f,a==="P"&&(l==="w"?(s<4&&(o+=.1*(4-s)),(c===3||c===4)&&(s===4||s===3)&&(o+=.2)):(s>3&&(o-=.1*(s-3)),(c===3||c===4)&&(s===3||s===4)&&(o-=.2)))}}return o}function d(t,e,n,o){const s={...t},[[c,i]]=e;return n.endsWith("K")&&(n.charAt(0)==="w"?(s.wK=!1,s.wQ=!1):(s.bK=!1,s.bQ=!1)),n==="wR"&&(c===7&&i===7&&(s.wK=!1),c===7&&i===0&&(s.wQ=!1)),n==="bR"&&(c===0&&i===7&&(s.bK=!1),c===0&&i===0&&(s.bQ=!1)),s}function E(t,e,n,o,s,c,i,l){if(s>=l||v(t,e,i).length===0)return w(t,i);let a=-1/0;const f=v(t,e,i);for(const u of f){const r=t[u[0][0]][u[0][1]],g=Q(t,u),k=d(i,u,r);if(a=Math.max(a,T(g,"b",n,o,s+1,c,k,l)),a>=o)return a;n=Math.max(n,a)}return a}function T(t,e,n,o,s,c,i,l){if(s>=l||v(t,e,i).length===0)return w(t,i);let a=1/0;const f=v(t,e,i);for(const u of f){const r=t[u[0][0]][u[0][1]],g=Q(t,u),k=d(i,u,r);if(a=Math.min(a,E(g,"w",n,o,s+1,c,k,l)),a<=n)return a;o=Math.min(o,a)}return a}function N(t,e,n,o){const s=v(t,e,n);if(s.length===0)return console.warn("[AI Logic] Minimax found no actions for player:",e),null;let c=[],i=e==="w"?-1/0:1/0;for(const l of s){const a=t[l[0][0]][l[0][1]],f=Q(t,l),u=d(n,l,a);let r;e==="w"?(r=T(f,"b",-1/0,1/0,1,e,u,o),r>i?(i=r,c=[l]):r===i&&c.push(l)):(r=E(f,"w",-1/0,1/0,1,e,u,o),r<i?(i=r,c=[l]):r===i&&c.push(l))}return c.length===0?(console.warn("[AI Logic] Minimax bestActions is empty, returning first available action."),s[0]):c[Math.floor(Math.random()*c.length)]}function _(t,e,n){console.log(`[AI Logic] Calculating move for player: ${e} with CR:`,n);const o=v(t,"w").length+v(t,"b").length,s=Math.max(Math.min(6,Math.floor(64/o)),3);console.log(`Max depth ${s}`);const c=N(t,e,n,s);return c||console.log("[AI Logic] No move found (checkmate/stalemate)."),c}self.onmessage=function(t){const{board:e,player:n,castlingRights:o}=t.data;if(!e||!n||o===void 0){console.error("[Worker] Invalid data received. Board, player, or castlingRights missing:",t.data),self.postMessage({type:"AIMOVES_ERROR",error:"Invalid data received by worker (board, player, or castlingRights missing)."});return}console.log("[Worker] Received task: Calculate AI move for player:",n,"with CR:",o);try{const s=_(e,n,o);s?(console.log("[Worker] Calculated AI move:",s),self.postMessage({type:"AIMOVES_CALCULATED",move:s})):(console.warn("[Worker] AI could not find a move (likely checkmate or stalemate)."),self.postMessage({type:"AIMOVES_CALCULATED",move:null}))}catch(s){console.error("[Worker] Error during AI move calculation:",s),self.postMessage({type:"AIMOVES_ERROR",error:s.message||"Unknown error in AI worker"})}},self.onerror=function(t){console.error("[Worker] Unhandled error in worker:",t.message,t.filename,t.lineno)}})();
